"use strict";function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable})),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(b,!0).forEach(function(c){_defineProperty(a,c,b[c])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(b).forEach(function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))});return a}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}var intervals=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],standardTuningNotes=[intervals[4],intervals[9],intervals[2],intervals[7],intervals[11],intervals[4]],scalesMap={},steps=[2,2,1,2,2,2,1];function buildScale(a){for(var b,c=[],d=intervals.indexOf(a),e=0,f=steps;e<f.length;e++){if(b=f[e],!intervals[d+b]){var g=d===intervals.length-1&&2===b?1:0;d=g,c=[].concat(_toConsumableArray(c),[intervals[g]]);continue}c=[].concat(_toConsumableArray(c),[intervals[d+b]]),d+=b}return c}function buildScalesMap(){for(var a,b=0,c=intervals;b<c.length;b++)a=c[b],scalesMap=_objectSpread({},scalesMap,_defineProperty({},a,{id:a,notes:buildScale(a)}))}buildScalesMap();var selectedScale=scalesMap.C;function getNotesOfString(a){for(var b=[],c=11===intervals.indexOf(a)?0:intervals.indexOf(a)+1;11>=b.length;)intervals[c]||(c=0),b=[].concat(_toConsumableArray(b),[intervals[c]]),c++;return b}function buildFretboard(a){var b=a.portrait,c=!0===b?[].concat(standardTuningNotes):[].concat(standardTuningNotes).reverse();document.getElementById("fretBoard").innerHTML="<div class=\"frets-edge\">".concat(buildFrets(),"</div> \n    ").concat(c.map(function(a,b){return"".concat(buildString(a)," ").concat(5>b?"<div class=\"frets\">".concat(buildFrets(b),"</div>"):"")}).join("")," \n    <div class=\"frets-edge\">").concat(buildFrets(),"</div>\n    </div>")}var buildFrets=function(a){for(var b="",c=0;12>c;c++)b+="<div class=\"fret\">".concat(2===a&&(4===c||6===c||8===c)||11===c&&(0===a||4===a)?"<div class=\"fret-dot\"></div>":"","</div>");return b},buildString=function(a){return"<div class=\"guitar-string\">".concat(getNotesOfString(a).map(function(a){return"<div class=\"note\">".concat(selectedScale.notes.includes(a)?"<div class=\"note-text-backdrop\"></div><span class=\"note-text\"><p>".concat(a,"</p></span>"):"","</div>")}).join(""),"</div>")};function buildNoteSelector(a){var b=a.portrait,c=[];for(var e in scalesMap)c=[].concat(_toConsumableArray(c),["<option value=\"".concat(e,"\">").concat(e,"</option>")]);var d=document.getElementById("noteSelect");d.innerHTML=c.join(),d.value=selectedScale.id}function reDrawApp(){return window.innerHeight>window.innerWidth?(document.getElementById("wrapper").className="app-wrapper portrait-mode",buildNoteSelector({portrait:!0}),void buildFretboard({portrait:!0})):void(document.getElementById("wrapper").className="app-wrapper landscape-mode",buildNoteSelector({portrait:!1}),buildFretboard({portrait:!1}))}window.addEventListener("resize",function(){reDrawApp()}),document.getElementById("noteSelect").addEventListener("change",function(a){selectedScale=scalesMap[a.target.value],document.getElementById("noteSelect").value=a.target.value,reDrawApp()}),reDrawApp(),document.getElementById("fullScreen").addEventListener("click",function(){screenfull.isEnabled&&screenfull.toggle()});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,